name: Build and Upload Android app - stage

on:
  issue_comment:
    types: [created]

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
   pr_commented:
     name: PR commented '/build-android'
     if: ${{ github.event.issue.pull_request && endsWith(github.event.comment.body, '/build-android')}}
     runs-on: ubuntu-latest
     outputs:
        git_tag: ${{ steps.generate_release.outputs.git_tag }}
        git_branch: ${{ steps.get-pr-ref.outputs.git_branch }}
     steps:
       - run: |
           echo "PR #${{ github.event.issue.number }} commented '/build-android'"
       - name: Fetch related Github PR
         uses: actions/github-script@v4
         id: get-pr
         with:
           script: |
             const request = {
               owner: context.repo.owner,
               repo: context.repo.repo,
               pull_number: context.issue.number
             }
             core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
             try {
               const result = await github.pulls.get(request)
               return result.data
             } catch (err) {
               core.setFailed(`Request failed with error ${err}`)
             }
       - name: Get PR HEAD REF
         id: get-pr-ref
         env:
           PR_HEAD_REF: "${{ fromJSON(steps.get-pr.outputs.result).head.ref }}"
         run: |
           echo "PR_HEAD_REF_SHORT=$(echo ${PR_HEAD_REF##*/})" >> $GITHUB_ENV
           echo "::set-output name=git_branch::$PR_HEAD_REF"
       - name: Get PR HEAD SHA
         env:
           PR_HEAD_SHA: "${{ fromJSON(steps.get-pr.outputs.result).head.sha }}"
         run: echo "PR_HEAD_SHA=$PR_HEAD_SHA" >> $GITHUB_ENV
       - uses: actions/checkout@v2
         with:
           fetch-depth: 0
       - name: Generate release name
         id: generate_release
         run: |
           SUFFIX_FROM_BRANCH=$(echo ${PR_HEAD_REF_SHORT##*/})
           GITHUB_LATEST_RELEASE=$(git tag -l --sort -version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
           INCREMENTED_GITHUB_LATEST_RELEASE=`echo $GITHUB_LATEST_RELEASE | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}'`
           PRERELEASE_NAME=$(echo $INCREMENTED_GITHUB_LATEST_RELEASE-$SUFFIX_FROM_BRANCH)
           LATEST_RELEASE=$(git tag --list --sort=-version:refname "$PRERELEASE_NAME.*" | head -n 1)
           LATEST_BUILD_NUMBER=${LATEST_RELEASE##*.}
           RELEASE_BUILD_NUMBER=$(($LATEST_BUILD_NUMBER+1))
           echo "PRERELEASE_NAME=$PRERELEASE_NAME.$RELEASE_BUILD_NUMBER+android" >> $GITHUB_ENV
           echo "::set-output name=git_tag::$PRERELEASE_NAME.$RELEASE_BUILD_NUMBER+android"
       - name: Create git tag
         run: |
           git tag "$PRERELEASE_NAME" "$PR_HEAD_SHA"
           git push origin "$PRERELEASE_NAME"
       - name: Create Pre-release from PR
         uses: softprops/action-gh-release@v0.1.14
         with:
           tag_name: ${{ env.PRERELEASE_NAME }}
           target_commitish: ${{ env.PR_HEAD_SHA }}
           name: ${{ env.PRERELEASE_NAME }} - Android Stage
           prerelease: true
       - name: Comment back PR
         uses: actions/github-script@v5
         with:
           script: |
             github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: `👍 Pre-Release [${{ env.PRERELEASE_NAME }}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${{ env.PRERELEASE_NAME }}) created!`
             })


   build_and_upload:
      name: Build and Upload Android app - stage
      needs: [pr_commented]
      runs-on: ubuntu-20.04
      env:
        GIT_TAG: ${{ needs.pr_commented.outputs.git_tag }}
        BRANCH: ${{ needs.pr_commented.outputs.git_branch}}
      steps:
        - name: Update Version Number & Build Number
          run: |
            echo "BUILD_NUMBER=$(date +%y%m%d%H)" >> $GITHUB_ENV
            echo "VERSION_NUMBER=${GIT_TAG/-*}" >> $GITHUB_ENV
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
            ref: ${{ env.BRANCH }}
        - name: Set up Ruby env
          uses: ruby/setup-ruby@v1
          with:
            ruby-version: 3.1
            bundler-cache: true
        - run: echo $GIT_TAG $VERSION_NUMBER $BUILD_NUMBER
        - run: bundle exec fastlane --version
        # - name: Use node.js 14
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: '14'
        #     registry-url: 'https://registry.npmjs.org'
        #   env:
        #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        # - name: Cache Modules
        #   uses: actions/cache@v2
        #   with:
        #     path: '**/node_modules'
        #     key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
        # - name: Install Dependencies
        #   run: npm install --no-audit
        # - name: Build Stage Mobile sources
        #   run: npm run build:stage:mobile
        # - name: Sync Android
        #   run: npx cap sync android
        # - name: Decode Keystore file
        #   run: echo ${{ secrets.ANDROID_KEYSTORE }} | base64 -d | tee android-keystore.jks android/app/android-keystore.jks