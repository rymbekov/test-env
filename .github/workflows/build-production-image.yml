name: Build Production Docker image

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  GIT_TAG: ${{ github.ref_name }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
#   unit_tests:
#      name: Unit Tests
#      if: ${{ !endsWith(github.ref_name, '-npm') }}
#      runs-on: ubuntu-20.04
#      steps:
#        - name: Hi
#          run: echo "Hello world"
#        - uses: actions/checkout@v3
#        - name: Use node.js 14
#          uses: actions/setup-node@v3
#          with:
#            node-version: '14'
#            cache: 'npm'
#            registry-url: 'https://registry.npmjs.org'
#          env:
#            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#        - name: Install Dependencies
#          run: npm ci
#        - name: Run unit tests
#          run: npm run test:unit -- --runInBand --ci --reporters=default --reporters=jest-junit

#   code_style:
#      name: Code Style
#      if: ${{ !endsWith(github.ref_name, '-npm') }}
#      runs-on: ubuntu-20.04
#      steps:
#        - uses: actions/checkout@v3
#        - name: Use node.js 14
#          uses: actions/setup-node@v3
#          with:
#            node-version: '14'
#            cache: 'npm'
#            registry-url: 'https://registry.npmjs.org'
#          env:
#            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#        - name: Install Dependencies
#          run: npm ci
#        - name: Run lint
#          run: npm run lint -- --format junit --output-file reports/elsint/js-lint-results.xml
            
  build:
     name: Build Docker image
    #  needs: [unit_tests, code_style]
    #  if: ${{ !endsWith(github.ref_name, '-npm|docs') }}
     runs-on: ubuntu-20.04
     steps:
        - uses: actions/checkout@v3
        - name: Check git tag
          run: echo ${{ env.GIT_TAG }}
        # - name: Use node.js 14
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: '14'
        #     registry-url: 'https://registry.npmjs.org'
        #   env:
        #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        # - name: Copy .npmrc
        #   run: cp $NPM_CONFIG_USERCONFIG $HOME/.npmrc
        # - name: Configure AWS credentials
        #   uses: aws-actions/configure-aws-credentials@v1
        #   with:
        #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #     aws-region: us-east-1
        # - name: Build docker image for service
        #   run: ./scripts/build.sh test $GIT_TAG true
        # - uses: ./.github/actions/slack
        #   if: always()
        #   with:
        #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        #     SLACK_SUCCESS_MESSAGE: "ðŸ“¦ Docker image *${{ env.REPO_NAME }}@${{ env.GIT_TAG }}* created! (by ${{ github.actor }})!"